<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="info" updates="4035" docName="draft-pwouters-powerbind-00" ipr="trust200902">

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="Delegation Only DNSKEYs">The Delegation_Only DNSKEY flag</title>
    <author fullname="Paul Wouters" initials="P." surname="Wouters" role="editor">
      <organization>Red Hat</organization>
      <address>
       <email>pwouters@redhat.com</email>
      </address>
    </author>
    <author surname="Xia" initials="L." fullname="Liang Xia">
     <organization>Huawei</organization>
     <address>
      <email>frank.xialiang@huawei.com</email>
     </address>
    </author>
    <author fullname="Wes Hardaker" initials="W." surname="Hardaker">
     <organization>USC/ISI</organization>
     <address>
      <postal>
       <street>P.O. Box 382</street>
       <city>Davis, CA</city>
       <code>95617</code>
        <country>US</country>
       </postal>
       <email>ietf@hardakers.net</email>
     </address>
    </author>

    <date year="2018" />


    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
         in the current day and month for you. If the year is not the current one, it is 
         to specify at least a month (xml2rfc assumes day="1" if not specified for the 
         purpose of calculating the expiry date).  With drafts it is normally sufficient to 
         specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>Security</area>

    <workgroup>DNSOP</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>DNSOP</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>Binding DNSSEC keys to delegation-only</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>
This document introduces a new DNSKEY flag called DELEGATION_ONLY that
indicates that the particular zone will never sign zone data across a label.
That is, every dot is considered a zone cut and must have its own (signed)
delegation.
      </t>
    </abstract>
  </front>

   <middle>
     <section anchor="intro" title="Introduction">
       <t>
       The DNS Security Extensions [DNSSEC] use public key cryptography to
        create an hierarchical trust base with the DNSSEC root public key at
        the top, followed by TLD keys one level underneath. While the root
        and TLD zones are asumed to be almost exclusively delegation-only
        zones, there is currently no method to force these zones to actually
        behave as a delegation-only zone. This creates an attractive target
        for malicious use of these zones - either by their owners or through
        coercion. For example, the DNSSEC root key could remove a delegation
        for "example.com" and sign an A record and TLSA record for "example.com",
        overriding the authority of "com" and "example.com". If such a change
        is done in a targetted attack, such an attack is near impossible to
        detect and log in any kind of transparency audit log. 
        </t>
        <t>
       A new DNSKEY flag is introduced to signify a public commitment
       by the zone to state that the zone will never sign any DNS data
       that traverses a single label and if any such signed data is
       encountered by validating resolvers, that this data should be
       interpreted as BOGUS. All delegations in the zone will have at
       most one added label. Any data found that does not comply to this
       commitment MUST be interpreted as BOGUS.
        </t>
      </section>
  
      <section title="Terminology" anchor="terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC&nbsp;2119</xref>.</t>
      </section>


<section title="The Deep Link State problem">
  <t>
The hierarchical model of DNSSEC (<xref target="RFC4033"/>, <xref target="RFC4034"/>
and <xref target="RFC4035"/> comes with the property that a zone at one
point in the hierarchy can define, and therefor override, everything in
the DNS tree from their level and below. The DNSSEC root key could ignore
the NS records for ".org" and "example.org" and could place a record
"www.example.org" directly into its own zone, with the corresponding RRSIG
signed by the root key itself. Even if resolvers would defend against this
attack by not allowing RRSIG's to span across a zone cut, the root zone
operator (or any level higher in the hierarchy than the target victim)
could briefly remove the NS and DS records, and create a "legitimate" DNS
entry for "www.example.org" that traverses a label, but has no zonecuts.
The attacker could then publish DNS records such as A/AAAA records, but also
records used for authentication, such as TLSA, SMIME. OPENPGPKEY, SSHP or
IPSECKEY records.
 </t>
 <t>
Exposing such targetted attacks requires a transparency audit setup that needs to
log all signed DNS data to prove that data signed by a parental DNSKEY was out of
the ordinary.  The very distributed nature of DNS makes such transparency logs
prohibitively expensive and near impossible to operate. Additionally, it would
expose all zone data to any public log operators, thereby exposing all DNS data
to a public archive. This data could then be used for other malicious purposes.
 </t>
</section>

<section title="Limiting the scope of a DNSKEY RRset to Delegation Only">
<t>
This document introduces a new DNSKEY flag called DELEGATION_ONLY. When
this flag is set on the DNSKEY with SEP bit set (KSK), the zone commits
to not sign any data that crosses a label down in the hierarchy. This
forces the parent in the hierarchy to only sign NS and DS records for
all (non-glue) records regarding its child zones. It will no longer be
able to ignore (or briefly delete, see below) the child delegation and publish
data across the label by pretending the next label is not a zone cut.
</t>
<t>
For such a parent to take over data that belongs to its child zone, it has
two choices. It can (temporarilly) remove its own DNSKEY DELEGATION_ONLY
flag or it can replace the NS and DS records of its child zone with its
own keys for which it has the private key so it can sign DNS data that
belongs to its child zone. Both of these actions cannot be hidden,
thus exposing such malicious behaviour.
</t>
</section>

<section title="Parental Transparency">
<t>
A parent zone, such as the root zone or a TLD, that has commited to the
DELEGATION_ONLY flag can no longer make an exception for a single delegated
zone without switching its entire zone by removing the DELEGATION_ONLY flag.
This action would be highly visible, and for some domains such as the root
or TLDs, require human interaction to notify the stake holders.
</t>
<t>
Removing the DELEGATION_ONLY flag from a DNSKEY requires that the zone
signals a new DS record to its parent, as changing any DNSKEY flag
changes the DS record data for that corresponds to its DNSKEY.
</t>
<t>
In the case of the root key, it would require updating out-of-band root
key meta information and/or perform an <xref target="RFC5011"/> style
rollover to the same key with updated DNSKEY flags. Due to the timings of
such a rollover, it would take at least 30 days for validating resolvers
to pick this policy change. It would also be a highly visible event.
</t>
<t>
Replacing the NS and DS records of a child zone can still be done in
a targetted attack mode, but these events are something that can be
easilly tracked by a transparency infrastructure similar to what is now
in use for the WebPKI using <xref target="RFC6962"/>(bis). With client
implementations of transparency, this would be logged and become visible
to the owner of the child zone and would expose the parent's malicious
action.
</t>
</section>


<section title="Marking the root key DELEGATION_ONLY">
<t>
Once the root key is marked with a DELEGATION_ONLY flag, and resolver software
and RFC 5011 compliant resolver setups have rolled into such a key, all TLDs
are ensured that the root key can no longer be abused to create "deep link"
data. Until the root key sets this bit, software MAY imply this bit is always
set as this is the current mode of operation of the root zone.
</t>
</section>
<section title="Marking TLD keys DELEGATION_ONLY">
<t>
Even before the root key has been marked with DELEGATION_ONLY, TLDs can already
signal their own willingness to commit to formally being DELEGATION_ONLY zones.
Any changes of that state in a TLD DNSKEY would require those TLDs to submit a new DS
record to the root, and could therefor only be done in a transparent and auditible
way - preventing abuse and coercion.
</t>
</section>

<section title="Migrating to/from DELEGATION_ONLY">
<t>
There might be multiple DNSKEYs with the SEP bit set in a zone. For the purpose of
delcaring a zone as DELEGATION_ONLY, only those DNSKEY's that have a corresponding
DS record at the parent MUST be considered. If multiple DS records appear at the
parent, some of which point to DNSKEY's with and some of which point to DNSKEY's
without the DELEGATION_ONLY flag set, the zone MUST be considered DELEGATION_ONLY.
This situation will occur when a zone is rolling its DNSKEY key at the same time
as it is commiting to a DELEGATION_ONLY zone (or the reverse).
</t>
</section>

<section title="Thirdparty usage " anchor="thirdparty">
<t>
The DELEGATION_ONLY flag has a strong overlap in functionality with the
Public Suffix List as both signal a formal split of authority between parent
and child.
</t>
</section>
<section title="Operational Considerations" anchor="operations">
<t>
Setting or unsetting the DELEGATION_ONLY flag must be handled like any other Key
Signing Key rollover procedure, with the appropriate wait times to give resolvers
the chance to update their caches.
</t>
<t>
Some TLDs offer a service where small domains can be hosted in-zone at the TLD zone
itself. In that case, the TLD MUST NOT set the DELEGATION_ONLY flag. Another
solution for such TLDs is to create delegations for these child zones with the
same or different DNSKEY as used in the parent zone itself.
</t>
<t>
If a zone is publishing glue records for a number of zones, and the
zone that contains the authoritative records for this glue is deleted,
a resigning of the zone will make this orphaned glue authoritative within
the zone. However, with the DELEGATION_ONLY bit set, this (signed) DNSSEC
data will be considered BOGUS as it violations the commitment to only
delegate. This may impact domains that depended on this unsigned glue.
</t>
<t>For example, if "example.com" and "example.net" use NS records pointing to "ns.example.net",
then if "example.net" is deleted from the ".net" zone, and the previously unsigned glue of
"ns.example.net" is now signed by the ".net" zone, the "example.com" zone will lose
its NS records and fail to resolve.
</t>
<t>The bind DNS software has an option called "delegation_only zones" which is an option
that means something completely different. It refers to ignoring wildcard records in
specified zones that are deemed delegation-only zones.
</t>
</section>

<section title="Security Considerations" anchor="security">
<t>There are no negative security impacts of using the DELEGATION_ONLY bit?
</t>
</section>

<section anchor="IANA" title="IANA Considerations">
<t>
This document defines a new DNSKEY flag, the DELEGATION_ONLY flag, whose
value [TBD] has been allocated by IANA from the DNSKEY FLAGS registry.
</t>
</section>

<section title="Acknowledgements" anchor="acknowledgements">
<t>The author wishes to thank Thomas H. Ptacek for his insistence on this matter.</t>
<t>Thanks to the following IETF participants: Viktor Dukhovni, Shumon Huque, Geoff Huston,
Rick Lamb and Sam Weiler.</t>
</section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

<references title="Normative References">
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5011.xml"?>
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4035.xml"?>
</references>

<references title="Informative References">
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml"?>
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4034.xml"?>
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6962.xml"?>
</references>

  </back>
</rfc>
